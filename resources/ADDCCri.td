def ADDCCri {	// InstructionEncoding Instruction InstSP F3 F3_2
  bits<2> op = { 1, 0 };
  bits<5> rd = { ?, ?, ?, ?, ? };
  bits<6> op3 = { 0, 1, 0, 0, 0, 0 };
  bits<5> rs1 = { ?, ?, ?, ?, ? };
  bits<13> simm13 = { ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? };
  field bits<32> Inst = { 1, 0, rd{4}, rd{3}, rd{2}, rd{1}, rd{0}, 0, 1, 0, 0, 0, 0, rs1{4}, rs1{3}, rs1{2}, rs1{1}, rs1{0}, 1, simm13{12}, simm13{11}, simm13{10}, simm13{9}, simm13{8}, simm13{7}, simm13{6}, simm13{5}, simm13{4}, simm13{3}, simm13{2}, simm13{1}, simm13{0} };
  field bits<32> SoftFail = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  int Size = 4;
  string DecoderNamespace = "Sparc";
  list<Predicate> Predicates = [];
  string DecoderMethod = "";
  bit hasCompleteDecoder = 1;
  string Namespace = "SP";
  dag OutOperandList = (outs IntRegs:$rd);
  dag InOperandList = (ins IntRegs:$rs1, simm13Op:$simm13);
  string AsmString = "addcc $rs1, $simm13, $rd";
  EncodingByHwMode EncodingInfos = ?;
  list<dag> Pattern = [(set i32:$rd, (addc i32:$rs1, (i32 simm13:$simm13)))];
  list<Register> Uses = [];
  list<Register> Defs = [ICC];
  int CodeSize = 0;
  int AddedComplexity = 0;
  bit isPreISelOpcode = 0;
  bit isReturn = 0;
  bit isBranch = 0;
  bit isEHScopeReturn = 0;
  bit isIndirectBranch = 0;
  bit isCompare = 0;
  bit isMoveImm = 0;
  bit isMoveReg = 0;
  bit isBitcast = 0;
  bit isSelect = 0;
  bit isBarrier = 0;
  bit isCall = 0;
  bit isAdd = 0;
  bit isTrap = 0;
  bit canFoldAsLoad = 0;
  bit mayLoad = ?;
  bit mayStore = ?;
  bit mayRaiseFPException = 0;
  bit isConvertibleToThreeAddress = 0;
  bit isCommutable = 0;
  bit isTerminator = 0;
  bit isReMaterializable = 0;
  bit isPredicable = 0;
  bit isUnpredicable = 0;
  bit hasDelaySlot = 0;
  bit usesCustomInserter = 0;
  bit hasPostISelHook = 0;
  bit hasCtrlDep = 0;
  bit isNotDuplicable = 0;
  bit isConvergent = 0;
  bit isAuthenticated = 0;
  bit isAsCheapAsAMove = 0;
  bit hasExtraSrcRegAllocReq = 0;
  bit hasExtraDefRegAllocReq = 0;
  bit isRegSequence = 0;
  bit isPseudo = 0;
  bit isMeta = 0;
  bit isExtractSubreg = 0;
  bit isInsertSubreg = 0;
  bit variadicOpsAreDefs = 0;
  bit hasSideEffects = ?;
  bit isCodeGenOnly = 0;
  bit isAsmParserOnly = 0;
  bit hasNoSchedulingInfo = 0;
  InstrItinClass Itinerary = IIC_iu_instr;
  list<SchedReadWrite> SchedRW = ?;
  string Constraints = "";
  string DisableEncoding = "";
  string PostEncoderMethod = "";
  bits<64> TSFlags = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
  string AsmMatchConverter = "";
  string TwoOperandAliasConstraint = "";
  string AsmVariantName = "";
  bit UseNamedOperandTable = 0;
  bit UseLogicalOperandMappings = 0;
  bit FastISelShouldIgnore = 0;
  bit HasPositionOrder = 0;
}
